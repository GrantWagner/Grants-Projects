Grant's PC

  GSM

  G++
    Features
     * Files can be named anything
     * Multiple Classes can be defined in a file
     * All classes extend Base implicitly
     * Can extend class Service, to be included in built in Dependency Injection.
       * Each class will be instantiated once.
       * Any attempt to "new" a service will generate a warning (error?)
       * Object Parameters will be assumed to be other services, and searched for
       * basic type or String parameters are assumed to be constant properties, and will be loaded from a special implicitly defined service.
     * All methods are assumed to be static, until they attempt to access a field. It is not explicitly defined.
       * Special case for new()?
     * memory is managed by reference counting.
     * support exception throwing.
     * Multiple inharentance.
     * Abstract methods are allowed at any time, simply put no body.

    Syntax
      [File]:
        [Package]
        Class [Class] ( '<' [TypeReference] '>' )? [Extends [Class] (,[Class])* ]* {   //implied following Base
          ( [Field] || [Method] )*
        }

      [Field]:
        [Type] [Name] = [Value]; //fields MUST be initialized;

      [Method]:
        [Type] [Name]'(' ( [Type] [Name] )* ')' (';' || '{'
          ([Expression];)+
        '}')

      [Expression]:
        [Name] = [Expression] ||
        [Constant] ||
        [MethodCall] ||
        [Expression] [BinaryOperator] [Expression] ||
        [UnaryOperator] [Expression] ||
        '(' [Expression] ')'

      Type:
        [Class] || "int" || "float" || [Type]( '[' [Int] ']' )+ || [TypeReference]

      TypeReference:
        [Name]

      UnaryOperator:
        "-"
        "=" [BinaryOperator]

      BinaryOperator:
        "^"
        "*"
        "/"
        "%"
        "+"
        "-"
        "&&"  //boolean operations
        "||"
        "!!"
        "&"   //bit operations
        "|"
        "!"
        "<<"
        ">>"

    class Base {
      new();      //Explicitly create a new instance, maybe should be considered an operator?
      delete();   //Sets this reference to null, may delete object
      hashCode(); //Uses reflection to recursively call all fields.
      equals(); //Safety checks, and then compares hashcodes
      toString(); //Uses reflection to generate a json like block
      class(); //Returns the class object that represents this object.
    }

    Starting Point
      Main.main(args))

    Library
      Base
        String
        Pointer
      Reflection
        Class
        Field
        Method
      Testing
        Mock
        Assert
      DataTypes
        List
        ArrayList
        LinkedList
        Map
        HashMap
        TreeMap
        Tree
        BinaryTree
        BalancedTree
      Math
      Graphics
        DrawLine
        DrawTriangle
        Clip
        Blit
      Text
        Trie
        Distance() // https://en.wikipedia.org/wiki/Jaro%E2%80%93Winkler_distance
      Binary
        BitArray
        HuffmanEncode // https://en.wikipedia.org/wiki/Huffman_coding

  OS
    Base Internal Operations:
      Preemptive multitasking kernel
      Hardware Abstraction:
        Video as exclusive (fullscreen)
        Video as windowing server
          Support for undecorated windows (aka conky)
        Audio as mixing server
          Support plugins
        Networking as socket layer
        Managed Filesystem
          Mount on insert.
        General Serial support access
          Special links to debug serial block device
        Keyboard as text buffer
        Keyboard as sampled state
        Mouse

    Library
      Sound
        Mixer
        Loaders
      Pictures
        Loaders
        Updates
        Gui Toolkit
          Explicit Frame
          Resizeable Frame
          ToolBar
          MenuBar
          Button
          TextDialog
          Canvas
      FS
        Entries(Directory)
        Details(Entry)
        Content(Entry)
        Write(Entry)
      Compression
        Bitstream compression
        Folder compression
      Encryption
      Vector Pictures (Somewhere between pdf and svg)
        Loaders
        Render
      Text
        "Markdown Renderer"

    Applications
      Basic Features
        Note: currently no plans for desktop-as-a-folder
        Panel with plugins:
          Menu Plugin
            Entries generated by file scan
          Menu Search Plugin
          Launcher Plugin
          Window Buttons (aka Win95 application selection)
          Desktop Switcher
        Window Manager
      General Apps
        Shell
        Sound Mixer
          Plugins
            StereoToBiaurial
            ExtraStereo
            GeneralEqualizer
        Network Manager
        Calculator
        Terminal
        Package Manager
        File Manager
          Plugins
            CompressedFiles
      Programming Apps
        Assembler
        Compiler
        Builder (Maven-Ant-Make)
        Source Control
        Continuous Integration
        Text Editor
          Plugins
            Syntax highlighting
            Formatter
            Compile, Debug, Run hotkeys
            "ASCII" Frames
            "ASCII" Tables
            "Markdown" Renderer
            Spellcheck
            Thesaurus
            SC Integration
      Media
        Image Viewer
        Image Editor
        Music Player
        Video Player
      Networking
        Telnet
          SSH
        FTP
          SFTP
        RSS
        IRC
        EMail
        Chat
          Plugins
        *WebBrowser (JS Interpreter and CSS) may be more than I want to even pretend to do. Maybe a basic html viewer? Does that even have a place in web 3.0?
      CAD
        2D Vector Editor
        3D Extrusion Editor
        2D GCode Generator for milling
        3D GCode Generator for printing
        GCode Transmitter
        Schematic Editor
        Electronic Board Editor
        Electronic Part Library Editor (schematic, and physic layouts)
      Games
        General Card Games
          Plugins
            Klondike
        Einstien Puzzle
        Doomsday Port.
        SNES Emu Port.
        NES Emu Port.
        Civ Clone


  Folder Pattern
    Files are sorted by default using a tokenized case-insitive alpha numeric sort.
    Generally only the "most recent" version will have icons and show up in search
    General security concepts:
      A given application should only access internal files by:
        /Users/{Username}/AppSettings/{Name}/{Version}, rw access
        /Applications/{Name}/{Version}, r access
      Using a file browser dialog gives much more access. Can read and write in:
        /Users/{Username}
        /Shared
        /Mount
      And read anywhere.
      Special case: Installation can only insert files to /Applications/{Name}/{Version}
      Special case: OS Drive mounts can only write new directories in /Mount
      Maybe a sudo command?
    simple strings are explicit folders
    {} enclosed are folder name patterns
    [] enclosed are file name patterns
    () enclosed are general notes
    /
      "Mount"
        {DriveName}
      "Users"
        {UserName}
          Documents
          Downloads
          AppSettings
            {ApplicationName}
              {VersionString}
      "Shared"
      "Applications"
        "Boot"
          (Kernel must be here)
        {ApplicationName}
          {VersionString}
            [ApplicationName.exe]
            [ApplicationName.menu]
